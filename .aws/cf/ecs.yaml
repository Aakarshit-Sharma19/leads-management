AWSTemplateFormatVersion: "2010-09-09"
Description: A template setting up an ECS cluster for only one service

Parameters:
  ProjectName:
    Description: The name of the project
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  DBInstanceHost:
    Type: String
  DBInstancePort:
    Type: String
  DBName:
    Type: String
  DBSecretArn:
    Type: String
  DBSecretKmsArn:
    Type: String
  ECRImage:
    Type: String
  SubnetIds:
    # noinspection YAMLSchemaValidation
    Type: List<AWS::EC2::Subnet::Id>
  SecretKeyArn:
    Type: String
    Default: 'arn:aws:ssm:ap-south-1:129190006344:parameter/LEADS_MANAGEMENT_SECRET_KEY'
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  LatestAmiId:
    # noinspection YAMLSchemaValidation
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

Resources:

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ProjectName

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17' 
        Statement:
        - Effect: Allow
          Principal: 
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
        
      Policies:
        - PolicyName: Ec2ContainerInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ec2-instance-connect:SendSSHPublicKey
                Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/aws:cloudformation:stack-id: !Ref AWS::StackId
              - Effect: Allow
                Action:
                - ec2:DescribeInstances
                - ecs:DiscoverPollEndpoint
                - ecs:Poll
                - ecs:StartTelemetrySession
                Resource: "*"
              - Effect: Allow
                Action: 
                - ecs:RegisterContainerInstance
                - ecs:SubmitTaskStateChange
                Resource: !GetAtt EcsCluster.Arn

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AllowSecretEnv
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Ref SecretKeyArn

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GetDBCredentials
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref DBSecretArn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Ref DBSecretKmsArn

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2InstanceRole

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref Ec2InstanceProfile
      ImageId: !Ref LatestAmiId
      EbsOptimized: false
      InstanceMonitoring: false
      InstanceType: t3.micro
      SecurityGroups:
        - !Ref PublicSecurityGroup
      # noinspection YAMLSchemaValidation
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir /etc/ecs
          echo ECS_CLUSTER=${ProjectName} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          yum install -y ec2-instance-connect
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region}
    UpdateReplacePolicy: Delete

  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:    
      AutoScalingGroupName: !Sub '${ProjectName}-autoscaling-group'
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      # noinspection YAMLSchemaValidation
      VPCZoneIdentifier: !Ref SubnetIds
      Tags: 
        - Key: keyname
          Value: value
          PropagateAtLaunch: true

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub '/ecs/${ProjectName}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ProjectName
      Cpu: '1024'
      Memory: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !Ref EcsTaskRole
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-container'
          Image: !Ref ECRImage
          Memory: 512
          Cpu: 1024
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - curl https://localhost/health -k || exit 1
            Interval: 10
            Retries: 10
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: ALLOWED_HOSTS
              Value: "*"
            - Name: CSRF_TRUSTED_ORIGINS
              Value: "https://*"
            - Name: ENABLE_HTTPS
              Value: "true"
            - Name: DB_HOST
              Value: !Ref DBInstanceHost
            - Name: DB_PORT
              Value: !Ref DBInstancePort
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_SECRET_ARN
              Value: !Ref DBSecretArn
          Secrets:
            - Name: SECRET_KEY
              ValueFrom: !Ref SecretKeyArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${ProjectName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProjectName
      
    DependsOn:
      - LogGroup

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
